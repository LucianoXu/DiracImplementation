%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for 许英特 at 2024-06-06 15:25:43 +0800 

@inproceedings{dirac1939new,
  title={A new notation for quantum mechanics},
  booktitle={Mathematical proceedings of the Cambridge philosophical society},
  volume={35},
  number={3},
  pages={416--418},
  year={1939},
  organization={Cambridge University Press}
}

@book{Ohlebusch2002,
   author = {Enno Ohlebusch},
   publisher = {Springer Science & Business Media},
   title = {Advanced topics in term rewriting},
   year = {2002},
}

@article{Gramlich1994,
   abstract = {Modular properties of term rewriting systems, i.e. properties which are preserved under disjoint unions, have attracted an increasing attention within the last few years. Whereas confluence is modular this does not hold true in general for termination. By means of a careful analysis of potential counterexamples we prove the following abstract result. Whenever the disjoint union ℛ1 ⊕ ℛ2 of two (finitely branching) terminating term rewriting systems ℛ1, ℛ2 is non-terminating, then one of the systems, say ℛ1, enjoys an interesting (undecidable) property, namely it is not termination preserving under non-deterministic collapses, i.e. ℛ1 ⊕ \{itG(x, y)→ x, G(x, y) → y\} is non-terminating, and the other system ℛ2 is collapsing, i.e. contains a rule with a variable right hand side. This result generalizes known sufficient criteria for modular termination of rewriting and provides the basis for a couple of derived modularity results. Furthermore, we prove that the minimal rank of potential counterexamples in disjoint unions may be arbitrarily high which shows that interaction of systems in such disjoint unions may be very subtle. Finally, extensions and generalizations of our main results in various directions are discussed. In particular, we show how to generalize the main results to some restricted form of non-disjoint combinations of term rewriting systems, namely for 'combined systems with shared constructors'. © 1994 Springer-Verlag.},
   author = {Bernhard Gramlich},
   doi = {10.1007/BF01190827/METRICS},
   issn = {09381279},
   issue = {3-4},
   journal = {Applicable Algebra in Engineering, Communication and Computing},
   keywords = {Combination,Disjoint union,Modularity,Term rewriting systems,Termination},
   month = {5},
   pages = {131-158},
   publisher = {Springer-Verlag},
   title = {Generalized sufficient conditions for modular termination of rewriting},
   volume = {5},
   url = {https://link.springer.com/article/10.1007/BF01190827},
   year = {1994},
}

@article{Claude2004,
   abstract = {Termination is a non-modular property of rewriting systems, thus it is a difficult task to discover termination proofs for rewriting systems of a large number of rules. Recently, new modular and incremental termination criteria, suitable for automation, were proposed, using an approach based on notions of termination under non-deterministic collapse and dependency pairs, which apply to hierarchical combinations of rewriting systems. We extend this approach and corresponding results to the important case of rewriting modulo associativity and commutativity. © 2004 Elsevier Ltd. All rights reserved.},
   author = {Claude Marché and Xavier Urbain},
   doi = {10.1016/J.JSC.2004.02.003},
   issn = {0747-7171},
   issue = {1},
   journal = {Journal of Symbolic Computation},
   keywords = {Automation,Modularity,Rewriting,Termination},
   month = {7},
   pages = {873-897},
   publisher = {Academic Press},
   title = {Modular and incremental proofs of AC-termination},
   volume = {38},
   year = {2004},
}

@article{Giesl2006,
   abstract = {AProVE 1.2 is one of the most powerful systems for automated termination proofs of term rewrite systems (TRSs). It is the first tool which automates the new dependency pair framework [8] and therefore permits a completely flexible combination of different termination proof techniques. Due to this framework, AProVE 1.2 is also the first termination prover which can be fully configured by the user. © Springer-Verlag Berlin Heidelberg 2006.},
   author = {Jürgen Giesl and Peter Schneider-Kamp and René Thiemann},
   doi = {10.1007/11814771_24},
   isbn = {3540371877},
   issn = {16113349},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   pages = {281-286},
   publisher = {Springer Verlag},
   title = {AProVE 1.2: Automatic termination proofs in the dependency pair framework},
   volume = {4130 LNAI},
   year = {2006},
}



@article{Giesl2002,
   abstract = {Recently, Arts and Giesl developed the dependency pair approach which allows automated termination and innermost termination proofs for many term rewriting systems (TRSs) for which such proofs were not possible before. The motivation for this approach was that virtually all previous techniques for automated termination proofs of TRSs were based on simplification orderings. In practice, however, many rewrite systems are not simply terminating, i.e. their termination cannot be verified by any simplification ordering. In this paper we introduce a refinement of the dependency pair framework which further extends the class of TRSs for which termination or innermost termination can be shown automatically. By means of this refinement, one can now prove termination in a modular way. Thus, this refinement is inevitable in order to verify the termination of large rewrite systems occurring in practice. To be more precise, one may use several different orderings in one termination proof. Subsequently, we present several new modularity results based on dependency pairs. First, we show that the well-known modularity of simple termination for disjoint unions can be extended to DP quasi-simple termination, i.e. to the class of rewrite systems where termination can be shown automatically by the dependency pair technique in combination with quasi-simplification orderings. Under certain additional conditions, this new result also holds for constructor-sharing and composable systems. Second, the above-mentioned refinement of the dependency pair method yields new modularity criteria for innermost termination which extend previous results in this area considerably. In particular, existing results for modularity of innermost termination can easily be shown to be direct consequences of our new criteria. © 2002 Elsevier Science Ltd. All rights reserved.},
   author = {Jürgen Giesl and Thomas Arts and Enno Ohlebusch},
   doi = {10.1006/JSCO.2002.0541},
   issn = {0747-7171},
   issue = {1},
   journal = {Journal of Symbolic Computation},
   month = {7},
   pages = {21-58},
   publisher = {Academic Press},
   title = {Modular Termination Proofs for Rewriting Using Dependency Pairs},
   volume = {34},
   year = {2002},
}

@article{Arts2000,
   abstract = {We present techniques to prove termination and innermost termination of term rewriting systems automatically. In contrast to previous approaches, we do not compare left- and right-hand sides of rewrite rules, but introduce the notion of dependency pairs to compare left-hand sides with special subterms of the right-hand sides. This results in a technique which allows to apply existing methods for automated termination proofs to term rewriting systems where they failed up to now. In particular, there are numerous term rewriting systems where a direct termination proof with simplification orderings is not possible, but in combination with our technique, well-known simplification orderings (such as the recursive path ordering, polynomial orderings, or the Knuth-Bendix ordering) can now be used to prove termination automatically. Unlike previous methods, our technique for proving innermost termination automatically can also be applied to prove innermost termination of term rewriting systems that are not terminating. Moreover, as innermost termination implies termination for certain classes of term rewriting systems, this technique can also be used for termination proofs of such systems. © 2000 Elsevier Science B.V. All rights reserved.},
   author = {Thomas Arts and Jürgen Giesl},
   doi = {10.1016/S0304-3975(99)00207-8},
   issn = {0304-3975},
   issue = {1-2},
   journal = {Theoretical Computer Science},
   keywords = {Automated theorem proving,Dependency pairs,Term rewriting,Termination,Verification},
   month = {4},
   pages = {133-178},
   publisher = {Elsevier},
   title = {Termination of term rewriting using dependency pairs},
   volume = {236},
   year = {2000},
}



@article{Zhou2022,
	abstract = {CoqQ is a framework for reasoning about quantum programs in the Coq proof assistant. Its main components are: a deeply embedded quantum programming language, in which classic quantum algorithms are easily expressed, and an expressive program logic for proving properties of programs. CoqQ is foundational: the program logic is formally proved sound with respect to a denotational semantics based on state-of-art mathematical libraries (mathcomp and mathcomp analysis). CoqQ is also practical: assertions can use Dirac expressions, which eases concise specifications, and proofs can exploit local and parallel reasoning, which minimizes verification effort. We illustrate the applicability of CoqQ with many examples from the literature.},
	author = {Li Zhou and Gilles Barthe and Pierre-Yves Strub and Junyi Liu and Mingsheng Ying},
	doi = {10.1145/nnnnnnn.nnnnnnn},
	keywords = {Additional Key Words and Phrases: Quantum Programs,Mathematical Libraries,Program Logics,Proof Assistants},
	month = {7},
	title = {CoqQ: Foundational Verification of Quantum Programs},
	url = {https://arxiv.org/abs/2207.11350v1},
	year = {2022},
	bdsk-url-1 = {https://arxiv.org/abs/2207.11350v1},
	bdsk-url-2 = {https://doi.org/10.1145/nnnnnnn.nnnnnnn}}

@article{Arrighi2017,
	abstract = {We provide a computational definition of the notions of vector space and bilinear functions. We use this result to introduce a minimal language combining higher-order computation and linear algebra. This language extends the Lambda-calculus with the possibility to make arbitrary linear combinations of terms alpha.t + beta.u. We describe how to "execute" this language in terms of a few rewrite rules, and justify them through the two fundamental requirements that the language be a language of linear operators, and that it be higher-order. We mention the perspectives of this work in the field of quantum computation, whose circuits we show can be easily encoded in the calculus. Finally, we prove the confluence of the entire calculus.},
	author = {Pablo Arrighi and Gilles Dowek},
	doi = {10.23638/LMCS-13(1:8)2017},
	issn = {1860-5974},
	issue = {1},
	journal = {Logical Methods in Computer Science},
	keywords = {03B40,68N18,81P68,Computer Science,F.1.1,F.4.1,F.4.2,Logic in Computer Science,Programming Languages,Quantum Physics},
	month = {3},
	pages = {1-33},
	publisher = {Episciences.org},
	title = {Lineal: A linear-algebraic Lambda-calculus},
	url = {https://lmcs.episciences.org/3203},
	volume = {Volume 13, Issue 1},
	year = {2017},
	bdsk-url-1 = {https://lmcs.episciences.org/3203},
	bdsk-url-2 = {https://doi.org/10.23638/LMCS-13(1:8)2017}}

@article{Biamonte2017,
	abstract = {Tensor network methods are taking a central role in modern quantum physics and beyond. They can provide an efficient approximation to certain classes of quantum states, and the associated graphical language makes it easy to describe and pictorially reason about quantum circuits, channels, protocols, open systems and more. Our goal is to explain tensor networks and some associated methods as quickly and as painlessly as possible. Beginning with the key definitions, the graphical tensor network language is presented through examples. We then provide an introduction to matrix product states. We conclude the tutorial with tensor contractions evaluating combinatorial counting problems. The first one counts the number of solutions for Boolean formulae, whereas the second is Penrose's tensor contraction algorithm, returning the number of $3$-edge-colorings of $3$-regular planar graphs.},
	author = {Jacob Biamonte and Ville Bergholm},
	month = {7},
	title = {Tensor Networks in a Nutshell},
	url = {https://arxiv.org/abs/1708.00006v1},
	year = {2017},
	bdsk-url-1 = {https://arxiv.org/abs/1708.00006v1}}

@article{Baader1998,
	abstract = {Intended for students and professionals, this is the first English-language textbook offering a unified and self-contained introduction to the field of term rewriting. 1. Motivating Examples -- 2. Abstract Reduction Systems. 2.1. Equivalence and reduction. 2.2. Well-founded induction. 2.3. Proving termination. 2.4. Lexicographic orders. 2.5. Multiset orders. 2.6. Orders in ML. 2.7. Proving confluence. 2.8. Bibliographic notes -- 3. Universal Algebra. 3.1. Terms, substitutions, and identities. 3.2. Algebras, homomorphisms, and congruences. 3.3. Free algebras. 3.4. Term algebras. 3.5. Equational classes -- 4. Equational Problems. 4.1. Deciding [actual symbol not reproducible] E. 4.2. Term rewriting systems. 4.3. Congruence closure. 4.4. Congruence closure on graphs. 4.5. Syntactic unification. 4.6. Unification by transformation. 4.7. Unification and term rewriting in ML.},
	author = {Franz. Baader and Tobias Nipkow},
	isbn = {0 521 45520 0},
	pages = {301},
	publisher = {Cambridge University Press},
	title = {Term rewriting and all that},
	url = {https://books.google.com/books/about/Term_Rewriting_and_All_That.html?hl=zh-CN&id=N7BvXVUCQk8C},
	year = {1998},
	bdsk-url-1 = {https://books.google.com/books/about/Term_Rewriting_and_All_That.html?hl=zh-CN&id=N7BvXVUCQk8C}}

@article{Peterson1981,
	abstract = {An extenston of the Knuth-Bendix algorithm for finding complete sets of reductions is described. The extension is intended to handle equational theories which can be split into two parts, R and T, such that each equation m R can be construed as a reduction and T represents an equational theory for which a finite, complete umfication algorithm as known. The extension ts demonstrated in the case when T is the theory of a fimte number of associaUve and commutatwe functions and to which the extension is presently restricted An tmplementatlon of the extended Knuth-Bendtx algorithm has produced complete sets of reductions for free commutative groups, commutative rings wtth umt, and distributive lattices. {\copyright} 1981, ACM. All rights reserved.},
	author = {Gerald E. Peterson and Mark E. Stickel},
	doi = {10.1145/322248.322251},
	issn = {1557735X},
	issue = {2},
	journal = {Journal of the ACM (JACM)},
	keywords = {Boolean algebra,associative and commutative functions,commutative group,commutative ring,complete sets of reductions,complete unification algorithms,equational theories,finite termination property,lattice,simplification,theorem proving,unique termination property,well-founded partml order},
	month = {4},
	pages = {233-264},
	title = {Complete Sets of Reductions for Some Equational Theories},
	volume = {28},
	year = {1981},
	bdsk-url-1 = {https://doi.org/10.1145/322248.322251}}

@article{Jouannaud1984,
	author = {Jean-Pierre Jouannaud and Helene Kirchner},
	city = {New York, New York, USA},
	doi = {10.1145/800017.800519},
	isbn = {0897911253},
	journal = {Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of programming languages - POPL '84},
	pages = {83-92},
	publisher = {ACM Press},
	title = {Completion of a set of rules modulo a set of equations},
	url = {http://portal.acm.org/citation.cfm?doid=800017.800519},
	year = {1984},
	bdsk-url-1 = {http://portal.acm.org/citation.cfm?doid=800017.800519},
	bdsk-url-2 = {https://doi.org/10.1145/800017.800519}}

@article{Hietala2021,
	abstract = {We present VOQC, the first fully verified optimizer for quantum circuits, written using the Coq proof assistant. Quantum circuits are expressed as programs in a simple, low-level language called SQ...},
	author = {Kesha Hietala and Robert Rand and Shih Han Hung and Xiaodi Wu and Michael Hicks},
	doi = {10.1145/3434318},
	issn = {24751421},
	issue = {POPL},
	journal = {Proceedings of the ACM on Programming Languages},
	keywords = {Certified Compilation,Circuit Optimization,Formal Verification,Programming Languages,Quantum Computing},
	month = {1},
	pages = {29},
	publisher = {ACM PUB27 New York, NY, USA},
	title = {A verified optimizer for Quantum circuits},
	url = {https://dl.acm.org/doi/10.1145/3434318},
	volume = {5},
	year = {2021},
	bdsk-url-1 = {https://dl.acm.org/doi/10.1145/3434318},
	bdsk-url-2 = {https://doi.org/10.1145/3434318}}

@article{Arrighi2005b,
	abstract = {With a view towards models of quantum computation and/or the interpretation of linear logic, we define a functional language where all functions are linear operators by construction. A small step operational semantic (and hence an interpreter/simulator) is provided for this language in the form of a term rewrite system. The linear-algebraic lambda-calculus hereby constructed is linear in a different (yet related) sense to that, say, of the linear lambda-calculus. These various notions of linearity are discussed in the context of quantum programming languages. KEYWORDS: quantum lambda-calculus, linear lambda-calculus, $\lambda$-calculus, quantum logics.},
	author = {Pablo Arrighi and Gilles Dowek},
	date-modified = {2024-06-06 15:16:52 +0800},
	month = {1},
	title = {Linear-algebraic lambda-calculus},
	url = {https://arxiv.org/abs/quant-ph/0501150v1},
	year = {2005},
	bdsk-url-1 = {https://arxiv.org/abs/quant-ph/0501150v1}}

@article{Klop1989,
	abstract = {We consider the equational theory λπ of λ-calculus extended with constants π, π0, π1 and axioms for surjective pairing: π0(πXY) = X, π1(πXY) = Y, π(π0X)(π1X) = X. Two reduction systems yielding the equality of λπ are introduced; the first is not confluent and, for the second, confluence is an open problem. It is shown, however, that in both systems each term possessing a normal form has a unique normal form. Some additional properties and problems in the syntactical analysis of λπ and the corresponding reduction systems are discussed. {\copyright} 1989.},
	author = {J. W. Klop and R. C. de Vrijer},
	doi = {10.1016/0890-5401(89)90014-X},
	issn = {0890-5401},
	issue = {2},
	journal = {Information and Computation},
	month = {2},
	pages = {97-113},
	publisher = {Academic Press},
	title = {Unique normal forms for lambda calculus with surjective pairing},
	volume = {80},
	year = {1989},
	bdsk-url-1 = {https://doi.org/10.1016/0890-5401(89)90014-X}}

@article{Solovay2012,
	abstract = {We carry out a systematic study of decidability for theories (a) of real vector spaces, inner product spaces, and Hilbert spaces and (b) of normed spaces, Banach spaces and metric spaces, all formalised using a 2-sorted first-order language. The theories for list (a) turn out to be decidable while the theories for list (b) are not even arithmetical: the theory of 2-dimensional Banach spaces, for example, has the same many-one degree as the set of truths of second-order arithmetic. We find that the purely universal and purely existential fragments of the theory of normed spaces are decidable, as is the ∀∃ fragment of the theory of metric spaces. These results are sharp of their type: reductions of Hilbert's 10 th problem show that the ∃∀ fragments for metric and normed spaces and the ∀∃ fragment for normed spaces are all undecidable.},
	author = {Robert M Solovay and R D Arthan and John Harrison},
	keywords = {Banach spaces,Decidability,Hilbert spaces,inner product spaces,metric spaces,normed spaces,undecidability,vector spaces},
	title = {Some new results on decidability for elementary algebra and geometry},
	year = {2012}}

@article{Bertot2008,
	abstract = {In this paper, we present an approach to describe uniformly iterated "big" operations, like or max i∈ ∈I f(i) and to provide lemmas that encapsulate all the commonly used reasoning steps on these constructs. We show that these iterated operations can be handled generically using the syntactic notation and canonical structure facilities provided by the Coq system. We then show how these canonical big operations played a crucial enabling role in the study of various parts of linear algebra and multi-dimensional real analysis, as illustrated by the formal proofs of the properties of determinants, of the Cayley-Hamilton theorem and of Kantorovitch's theorem. {\copyright} 2008 Springer Berlin Heidelberg.},
	author = {Yves Bertot and Georges Gonthier and Sidi Ould Biha and Ioana Pasca},
	doi = {10.1007/978-3-540-71067-7_11/COVER},
	isbn = {3540710655},
	issn = {16113349},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	pages = {86-101},
	publisher = {Springer Verlag},
	title = {Canonical big operators},
	url = {https://link.springer.com/chapter/10.1007/978-3-540-71067-7_11},
	volume = {5170 LNCS},
	year = {2008},
	bdsk-url-1 = {https://link.springer.com/chapter/10.1007/978-3-540-71067-7_11},
	bdsk-url-2 = {https://doi.org/10.1007/978-3-540-71067-7_11/COVER}}

@article{Arrighi2005,
	abstract = {We usually define an algebra by a set, some operations defined on this set and some propositions that the algebra must validate. In some cases, we can replace these propositions by an algorithm on terms constructed upon these operations that the algebra must validate. We show in this note that this is the case for the notion of vectorial space and bilinear function. {\copyright} 2005 Elsevier B.V.},
	author = {Pablo Arrighi and Gilles Dowek},
	doi = {10.1016/J.ENTCS.2004.06.013},
	issn = {1571-0661},
	issue = {SPEC. ISS.},
	journal = {Electronic Notes in Theoretical Computer Science},
	keywords = {Bilinear function,Rewrite system,Tensorial product,Vectorial space},
	month = {1},
	pages = {249-261},
	publisher = {Elsevier},
	title = {A Computational Definition of the Notion of Vectorial Space},
	volume = {117},
	year = {2005},
	bdsk-url-1 = {https://doi.org/10.1016/J.ENTCS.2004.06.013}}

@article{Ferreira1993,
	abstract = {We investigate proving termination of term rewriting systems by interpretation of terms in a compositional way in a total wellfounded order. This kind of termination is called total termination. On one hand it is more restrictive than simple termination, on the other...},
	author = {M. C. F. Ferreira and H. Zantema},
	doi = {10.1007/978-3-662-21551-7_17},
	isbn = {978-3-662-21551-7},
	issn = {1611-3349},
	pages = {213-227},
	publisher = {Springer, Berlin, Heidelberg},
	title = {Total termination of term rewriting},
	url = {https://link.springer.com/chapter/10.1007/978-3-662-21551-7_17},
	year = {1993},
	bdsk-url-1 = {https://link.springer.com/chapter/10.1007/978-3-662-21551-7_17},
	bdsk-url-2 = {https://doi.org/10.1007/978-3-662-21551-7_17}}

@article{Zantema1994,
	abstract = {We investigate proving termination of term rewriting systems by interpretation of terms in a well-founded monotone algebra. The well-known polynomial interpretations can be considered as a particular case in this framework. A classification of types of termination, including simple termination, is proposed based on properties in the semantic level. A transformation on term rewriting systems eliminating distributive rules is introduced. Using this distribution elimination a new termination proof of the system SUBST of Hardin and Laville (1986) is given. This system describes explicit substitution in λ-calculus. Another tool for proving termination is based on introduction and removal of type restrictions. A property of many-sorted term rewriting systems is called persistent if it is not affected by removing the corresponding typing restriction. Persistence turns out to be a generalization of direct sum modularity, but is more powerful for both proving confluence and termination. Termination is proved to be persistent for the class of term rewriting systems for which not both duplicating rules and collapsing rules occur, generalizing a similar result of Rusinowitch for modularity. This result has nice applications, in particular in undecidability proofs. {\copyright} 1994 Academic Press Limited.},
	author = {H. Zantema},
	doi = {10.1006/JSCO.1994.1003},
	issn = {0747-7171},
	issue = {1},
	journal = {Journal of Symbolic Computation},
	month = {1},
	pages = {23-50},
	publisher = {Academic Press},
	title = {Termination of term rewriting: interpretation and type elimination},
	volume = {17},
	year = {1994},
	bdsk-url-1 = {https://doi.org/10.1006/JSCO.1994.1003}}

@article{Contejean2011,
	abstract = {We present the rewriting toolkit CiME3. Amongst other original features, this version enjoys two kinds of engines: to handle and discover proofs of various properties of rewriting systems, and to generate Coq scripts from proof traces given in certification problem format in order to certify them with a sceptical proof assistant like Coq. Thus, these features open the way for using CiME3 to add automation to proofs of termination or confluence in a formal development in the Coq proof assistant. {\copyright} {\'E}velyne Contejean, Pierre Courtieu, Julien Forest, Olivier Pons, Xavier Urbain.},
	author = {{\'E}velyne Contejean and Pierre Courtieu and Julien Forest and Olivier Pons and Xavier Urbain},
	doi = {10.4230/LIPICS.RTA.2011.21/-/STATS},
	isbn = {9783939897309},
	issn = {18688969},
	journal = {Leibniz International Proceedings in Informatics, LIPIcs},
	keywords = {Formal proof,Proof automation,Rewriting,Roof assistant},
	pages = {21-30},
	publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
	title = {Automated certified proofs with CiME3},
	url = {http://joerg.endrullis.de/jambox.html},
	volume = {10},
	year = {2011},
	bdsk-url-1 = {http://joerg.endrullis.de/jambox.html},
	bdsk-url-2 = {https://doi.org/10.4230/LIPICS.RTA.2011.21/-/STATS}}


@article{Aoto1997,
   author = {Takahito Aoto and Yoshihito Toyama},
   issue = {11},
   journal = {J. Univers. Comput. Sci.},
   pages = {1134-1147},
   publisher = {Citeseer},
   title = {Persistency of Confluence.},
   volume = {3},
   year = {1997},
}

@book{Nielsen2010,
   author = {Michael A Nielsen and Isaac L Chuang},
   publisher = {Cambridge university press},
   title = {Quantum computation and quantum information},
   year = {2010},
}

@misc{WolframLanguage,
   author = {Wolfram Research},
   note = {Accessed: 2024-06-06},
   title = {https://www.wolfram.com/language/},
   url = {https://www.wolfram.com/language/},
   year = {2024},
}

@article{Tarski1998,
   abstract = {By a decision method for a class K of sentence (or other expressions) is meant a method by means of which, given any sentence θ, one can always decide in a finite number of steps whether θ is in K; by a decision problem for a class K we mean the problem of finding a decision method for K. A decision method must be like a recipe, which tells one what to do at each steps so that no intelligence is required to follow it; and the method can be applied by anyone so long as he is able to read and follow directions.},
   author = {Alfred Tarski},
   doi = {10.1007/978-3-7091-9459-1_3},
   pages = {24-84},
   title = {A Decision Method for Elementary Algebra and Geometry},
   year = {1998},
}
