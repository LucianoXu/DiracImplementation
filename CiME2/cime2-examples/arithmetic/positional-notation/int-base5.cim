%
%            Entiers relatifs, systeme confluent avec 
%            - addition
%            - soustraction, oppose
%            - multiplication
%            - pgcd
%

operators
%variables
  x,y,z,u,v,w : variable
%constructeurs
  0 : constant
  1_z,j_z,0_z,2_z,jj_z : postfix unary
axioms
  (0)0_z = 0;

operators
%operateurs
  + : AC
  - : infix binary
  opp : unary
 
axioms

  x + 0 = x;
  (x)0_z+(y)0_z = (x+y)0_z;
  (x)0_z+(y)1_z = (x+y)1_z;
  (x)0_z+(y)j_z = (x+y)j_z;
  (x)0_z+(y)2_z = (x+y)2_z;
  (x)0_z+(y)jj_z = (x+y)jj_z;

  (x)1_z+(y)1_z = (x+y)2_z;
  (x)1_z+(y)j_z = (x+y)0_z;
  (x)1_z+(y)2_z = (x+y+(0)1_z)jj_z;
  (x)1_z+(y)jj_z = (x+y)j_z;

  (x)j_z+(y)j_z = (x+y)jj_z;
  (x)j_z+(y)2_z = (x+y)1_z;
  (x)j_z+(y)jj_z = (x+y+(0)j_z)2_z;

  (x)2_z+(y)2_z = (x+y+(0)1_z)j_z;
  (x)2_z+(y)jj_z = (x+y)0_z;

  (x)jj_z+(y)jj_z = (x+y+(0)j_z)1_z;

  opp(0) = 0;
  opp((x)0_z) = (opp(x))0_z;
  opp((x)1_z) = (opp(x))j_z;
  opp((x)j_z) = (opp(x))1_z;
  opp((x)2_z) = (opp(x))jj_z;
  opp((x)jj_z) = (opp(x))2_z;
  x - y = x+opp(y);


operators
  . : AC

axioms
  x.0 = 0;
  x.(y)0_z = (x.y)0_z;
  x.(y)1_z = x+(x.y)0_z;
  x.(y)j_z = (x.y)0_z+opp(x);
  x.(y)2_z = x+x+(x.y)0_z;
  x.(y)jj_z = (x.y)0_z+opp(x)+opp(x);


order
lexico(
  poly(
[0] = 2 ;
[0_z](x) = x;
[1_z](x) = x + 1;
[j_z](x) = x + 1;
[2_z](x) = x + 2;
[jj_z](x) = x + 2;
[+](x,y) = x + y - 2;
[opp](x) = x;
[-](x,y) = x + y;
[.](x,y) = x.y - x - y + 2);
  poly(
[0] = 2 ;
[0_z](x) = x;
[1_z](x) = x + 1;
[j_z](x) = x + 1;
[2_z](x) = x + 2;
[jj_z](x) = x + 2;
[+](x,y) = x + y - 2;
[opp](x) = x;
[-](x,y) = x + y - 1;
[.](x,y) = x.y);
  poly(
[0] = 2 ;
[0_z](x) = x + 1;
[1_z](x) = x + 1;
[j_z](x) = x + 1;
[2_z](x) = x + 1;
[jj_z](x) = x + 1;
[+](x,y) = x + y - 2;
[opp](x) = 2.x;
[-](x,y) = x + y - 1;
[.](x,y) = x.y);
interactive)

end
