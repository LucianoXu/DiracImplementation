let F = signature "
gt_out, le_out, nil, zero : constant;
merge_out, s : unary;
cons, gt_in, le_in, merge_in : binary;
u'''1, u''1 : 3;
u'1, u'2, u1, u2 : 5;
";

let X = vars "x y z x0 x1" ;

let R = TRS F X "
merge_in(x, nil) -> merge_out(x);
merge_in(nil, x) -> merge_out(x);
merge_in(cons(x, y), cons(z, x0)) -> u1(le_in(x, z), x, y, z, x0);
u1(le_out, x, y, z, x0) -> u2(merge_in(y, cons(z, x0)), x, y, z, x0);
u2(merge_out(z), x, y, x0, x1) -> merge_out(cons(x, z));
merge_in(cons(x, y), cons(z, x0)) -> u'1(gt_in(x, z), x, y, z, x0);
u'1(gt_out, x, y, z, x0) -> u'2(merge_in(cons(x, y), x0), x, y, z, x0);
u'2(merge_out(z), x, y, x0, x1) -> merge_out(cons(x0, z));
gt_in(s(x), s(y)) -> u''1(gt_in(x, y), x, y);
u''1(gt_out, x, y) -> gt_out;
gt_in(s(x), zero) -> gt_out; 
le_in(s(x), s(y)) -> u'''1(le_in(x, y), x, y);
u'''1(le_out, x, y) -> le_out;   
le_in(zero, s(y)) -> le_out;
le_in(zero, zero) -> le_out;
";

termcrit "dp";
termpolybound 1;
#verbose 1;
#time on;
termination R;
