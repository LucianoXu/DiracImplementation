

let F = signature "
  # : constant ; 
0,1 : postfix unary ;
+,- : infix binary ;
ge : binary ;
true,false : constant ;
not : unary ;
log : unary ;
log' : unary ;
if : 3 ;
";

let X = vars "x y z";

let R = TRS F X "
   (#)0 -> #;

     # + x -> x;
     x + # -> x;
     (x)0 + (y)0 -> (x+y)0;
     (x)0 + (y)1 -> (x+y)1;
     (x)1 + (y)0 -> (x+y)1;
     (x)1 + (y)1 -> (x+y+(#)1)0;

    # - x -> #;
     x - # -> x;
     (x)0 - (y)0 -> (x-y)0;
     (x)0 - (y)1 -> ((x-y)-(#)1)1;
     (x)1 - (y)0 -> (x-y)1;
     (x)1 - (y)1 -> (x-y)0;

      not(true) -> false ;
      not(false) -> true ;

  if(true,x,y) -> x;
  if(false,x,y) -> y;

      ge((x)0,(y)0) -> ge(x,y) ;
      ge((x)0,(y)1) -> not(ge(y,x)) ;
      ge((x)1,(y)0) -> ge(x,y) ;
      ge((x)1,(y)1) -> ge(x,y) ;
      ge(x,#) -> true ;
      ge(#,(x)0) -> ge(#,x) ;
      ge(#,(x)1) -> false ;

     log(x) -> log'(x) - (#)1 ;
     log'(#) -> # ;
   log'((x)1) -> log'(x) + (#)1 ;
   log'((x)0) -> if(ge(x,(#)1),log'(x) + (#)1,#);

";


let fun test t = normalize R (term F X t);

"tests : ";
test "log(#)";
test "log((#)1)";
test "log(((#)1)0)";
test "log(((#)1)1)";
test "log((((#)1)0)0)";
test "log((((#)1)0)1)";
test "log((((#)1)1)0)";
test "log((((#)1)1)1)";
test "log(((((#)1)0)0)0)";


"ca termine ?";


termcrit "dp";
termcrit "marks";
termcrit "nograph";
#time;
termination R;
