(*

  some examples for testing the dependency pair criteria with graphs. 

*)

let X=vars"x";
termcrit "dp";

(*

  a really stupid terminating system
   . it is not simply terminating
   . with the dependency graph criterion, it's trivial : no cycle

*)

let R1 = TRS 
   (signature "0:constant;f,s:unary;")
   X 
   "f(0)->f(s(0)); f(s(0))->f(s(s(0))); f(s(s(x)))->0;";

termination R1;

(*

  this one is easy as soon as we require that only one pair on a cycle
  strictly decreases. If we require all, it would not be possible to
  find a termination proof.

*)

let R2 = TRS 
   (signature "0,true,false:constant;evenodd:binary;s,not:unary;")
   X 
   "evenodd(x, 0) -> not (evenodd (x, (s (0))));
    evenodd (0, (s (0))) -> false;
    evenodd ((s (x)), (s (0))) -> evenodd (x, 0);
    not (true) -> false;
    not (false) -> true;";

termination R2;



let X=vars"x";
termcrit "dp";

let F = signature "a,b,c : constant ";

let R = TRS F X "
 a -> b ;
 a -> c ;
 b -> a ;
 c -> a ;
";

#verbose 1;

termcrit "marks";
termination R;


let F = signature "a,b,c,d : constant ";

let R = TRS F X "
 a -> b ;
 b -> c ;
 b -> d ;
 c -> a ;
 d -> a ;
";

#verbose 1;

termcrit "marks";
termination R;
