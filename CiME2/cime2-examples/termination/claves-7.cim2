let F = signature "
0, gt'ii'out, le'ii'out, nil : constant;
merge'iio'out, mergesort'io'in, mergesort'io'out, s, split'ioo'in, split0'ioo'in, split1'ioo'in, split2'ioo'in, u'1'1, u'2'1, u'5'1, u'5'4, u'6'1, u'7'1, u'8'1 : unary;
cons, gt'ii'in, le'ii'in, merge'iio'in, split'ioo'out, split0'ioo'out, split1'ioo'out, split2'ioo'out, u'3'2, u'4'2, u'5'2, u'5'3 : binary;
u'9'1 : 3;
u'3'1, u'4'1 : 5;
";

let X = vars "L1 L2 L3 L4 L5 L6 X Y";

let R = TRS F X "
gt'ii'in(s(X), s(Y)) -> u'1'1(gt'ii'in(X, Y));
u'1'1(gt'ii'out) -> gt'ii'out;
gt'ii'in(s(X), 0) -> gt'ii'out;
le'ii'in(s(X), s(Y)) -> u'2'1(le'ii'in(X, Y));
u'2'1(le'ii'out) -> le'ii'out;
le'ii'in(0, s(Y)) -> le'ii'out;
le'ii'in(0, 0) -> le'ii'out;
merge'iio'in(nil, L1) -> merge'iio'out(L1);
merge'iio'in(L1, nil) -> merge'iio'out(L1);
merge'iio'in(cons(X, L1), cons(Y, L2)) -> u'3'1(le'ii'in(X, Y), X, L1, Y, L2);
u'3'1(le'ii'out, X, L1, Y, L2) -> u'3'2(merge'iio'in(L1, cons(Y, L2)), X);
u'3'2(merge'iio'out(L3), X) -> merge'iio'out(cons(X, L3));
merge'iio'in(cons(X, L1), cons(Y, L2)) -> u'4'1(gt'ii'in(X, Y), X, L1, Y, L2);
u'4'1(gt'ii'out, X, L1, Y, L2) -> u'4'2(merge'iio'in(cons(X, L1), L2), Y);
u'4'2(merge'iio'out(L3), Y) -> merge'iio'out(cons(Y, L3));
mergesort'io'in(nil) -> mergesort'io'out(nil);
mergesort'io'in(cons(X, nil)) -> mergesort'io'out(cons(X, nil));
mergesort'io'in(cons(X, cons(Y, L1))) -> u'5'1(split2'ioo'in(cons(X, cons(Y, L1))));
u'5'1(split2'ioo'out(L3, L4)) -> u'5'2(mergesort'io'in(L3), L4);
u'5'2(mergesort'io'out(L5), L4) -> u'5'3(mergesort'io'in(L4), L5);
u'5'3(mergesort'io'out(L6), L5) -> u'5'4(merge'iio'in(L5, L6));
u'5'4(merge'iio'out(L2)) -> mergesort'io'out(L2);
split'ioo'in(L1) -> u'6'1(split0'ioo'in(L1));
u'6'1(split0'ioo'out(L2, L3)) -> split'ioo'out(L2, L3);
split'ioo'in(L1) -> u'7'1(split1'ioo'in(L1));
u'7'1(split1'ioo'out(L2, L3)) -> split'ioo'out(L2, L3);
split'ioo'in(L1) -> u'8'1(split2'ioo'in(L1));
u'8'1(split2'ioo'out(L2, L3)) -> split'ioo'out(L2, L3);
split0'ioo'in(nil) -> split0'ioo'out(nil, nil);
split1'ioo'in(cons(X, nil)) -> split1'ioo'out(cons(X, nil), nil);
split2'ioo'in(cons(X, cons(Y, L1))) -> u'9'1(split'ioo'in(L1), X, Y);
u'9'1(split'ioo'out(L2, L3), X, Y) -> split2'ioo'out(cons(X, L2), cons(Y, L3));
";

termcrit "dp";
polyinterpkind "linear";
termpolybound 1;
#time on;
termination R;

