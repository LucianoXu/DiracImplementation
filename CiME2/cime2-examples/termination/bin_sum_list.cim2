
polyinterpkind "linear";
termcrit "nomarks";
termcrit "nograph";
#verbose 1;

let X = vars "x y z l b";

let Fbin = signature "
    #   : constant ; 
    0,1 : postfix unary ;
   ";

let Mbin = HTRS {} Fbin X "(#)0 -> #;";

h_termination Mbin;

let Fadd = signature " + : infix binary";

let Madd = HTRS {Mbin} Fadd X "
     # + x -> x;
     x + # -> x;
     (x)0 + (y)0 -> (x+y)0;
     (x)0 + (y)1 -> (x+y)1;
     (x)1 + (y)0 -> (x+y)1;
     (x)1 + (y)1 -> (x+y+(#)1)0;
";

h_termination Madd;

let Fmult = signature " * : infix binary";

let Mmult = HTRS {Madd} Fmult X "
     # * x -> #;
     x * # -> #;
     (x)0 * y -> (x*y)0;
     (x)1 * y -> (x*y)0 + y;
";

h_termination Mmult;

polyinterpkind "simple";

h_termination Mmult;

let Flist = signature " nil : constant ; cons : binary";

let Mlist = HTRS {} Flist X "";

let Fsum = signature " sum : unary ";

let Msum = HTRS {Mlist ; Madd} Fsum X "
  sum(nil) -> (#)0;
  sum(cons(x,l)) -> x + sum(l);
";

polyinterpkind "linear";

h_termination Msum;

let Fbag = signature " empty : constant ; singl : unary ; U : AC";

let Mbag = HTRS {} Fbag X "
  empty U b -> b;
";

h_termination Mbag;


let Msumbag = HTRS {Mbag ; Madd} Fsum X "
  sum(empty) -> (#)0;
  sum(singl(x)) -> x;
  sum(x U y) -> sum(x) + sum(y);
";

h_termination Msumbag;


