
operators
  # : constant  
0,1 : postfix unary 
+,- : infix binary 
ge : binary 
true,false : constant 
not : unary 
log' : unary 
if : 3 
x,y,z : variable

order
  poly([#] = 0;
[0](x) = x + 1 ;  
[1](x) = x + 1;
[+](x,y) = x + y;
[-](x,y) = x ;
[not](x) = 1;
[true] = 0;
[false] = 1;
[ge](x,y) = y;
[if](x,y,z) = y + x.z;
[log'](x) = x
)

problems

compare    (#)0 with #;

compare      # + x with x;
compare      x + # with x;
compare      (x)0 + (y)0 with (x+y)0;
compare      (x)0 + (y)1 with (x+y)1;
compare      (x)1 + (y)0 with (x+y)1;
compare      (x)1 + (y)1 with (x+y+(#)1)0;
compare      x + (y + z) with (x + y) + z;

compare     # - x with #;
compare      x - # with x;
compare      (x)0 - (y)0 with (x-y)0;
compare      (x)0 - (y)1 with ((x-y)-(#)1)1;
compare      (x)1 - (y)0 with (x-y)1;
compare      (x)1 - (y)1 with (x-y)0;

compare       not(true) with false ;
compare       not(false) with true ;

compare   if(true,x,y) with x;
compare   if(false,x,y) with y;

compare       ge((x)0,(y)0) with ge(x,y) ;
compare       ge((x)0,(y)1) with not(ge(y,x)) ;
compare       ge((x)1,(y)0) with ge(x,y) ;
compare       ge((x)1,(y)1) with ge(x,y) ;
compare       ge(x,#) with true ;
compare       ge(#,(x)0) with ge(#,x) ;
compare       ge(#,(x)1) with false ;

compare    log'(#) with # ;
compare    log'((x)1) with log'(x) + (#)1 ;
compare    log'((x)0) with if(ge(x,(#)1),log'(x) + (#)1,#);

compare log'((x)1) with log'(x) ;
compare log'((x)0) with log'(x) ;

end


