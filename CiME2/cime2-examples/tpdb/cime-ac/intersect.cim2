(*

  Claude Marché

  Intersection of bags of integers.

  2 AC symbols, 1 commutative symbol

*)


[z, y, x]

AC [inter, union]

comm [eq]

if(true,x,y) -> x ;
if(false,x,y) -> y ;
eq(0,0) -> true ;
eq(0,s(x)) -> false ;
eq(s(x),s(y)) -> eq(x,y) ;
union(empty,x) -> x ;
inter(empty,x) -> empty ;
inter(union(y,z),x) -> union(inter(x,y),inter(x,z)) ;
inter(singl(x),singl(y)) -> if(eq(x,y),singl(x),empty) ;


(*

let F = signature "
  true,false : constant ; if : 3 ;

  0 : constant ;
  s : unary ;
  eq : prefix commutative ;

  empty : constant ;
  singl : unary ;
  union : AC ;

  inter : AC ;
";

let X = vars "x y z";

let R = HTRS {} F X "
     if(true,x,y) -> x ;
     if(false,x,y) -> y ;
     eq(0,0) -> true ;
     eq(0,s(x)) -> false ;
     eq(s(x),s(y)) -> eq(x,y) ;

     empty union x -> x ;

     x inter empty -> empty ;
     x inter (y union z) -> (x inter y) union (x inter z) ;
     singl(x) inter singl(y) -> if(eq(x,y),singl(x),empty) ;
";

termcrit "minimal";
termcrit "nomarks";
polyinterpkind { ("linear",1); ("simple";2) };
h_termination R;
output_last_proof "";
export_htrs R;

*)


     


  
