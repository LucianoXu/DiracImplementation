(* 

    Language and Term Rewriting System for "Typed Dirac Notation"

    This language can be used in two levels: deal with the internal untyped language directly,
    or use the typed syntax with type polymorphism.

    Yingte Xu, 2024

*)

let F = signature
"

  (* -------- types -------- *)

  TYPE: constant ;

  (* basis types *)

  PROD : infix binary ;

  (* Dirac types *)

  S : constant ;
  K : unary ;
  B : unary ;
  O : binary ;


  (* complex number *)
  + : AC ;
  * : AC ;
  0 : constant ;
  1 : constant ;
  ^* : postfix unary ;

  
  (* universal application *)
  @ : infix binary ;

  (* otimes and cdot *)
  OTIMES : infix binary ;
  CDOT : infix binary ;


  (* -------- internal langauge -------- *)

  (* Basis *)
  PAIR : binary ;
  FST : unary ;
  SND : unary ;

  (* Scalar *)
  DELTA : commutative ;
  DOT : infix binary ;

  (* Ket *)
  0K : unary ;
  KET : unary ;
  ADJK : unary ;
  SCRK : infix binary ;
  ADDK : AC ;
  MLTK : infix binary ;
  TSRK : infix binary ;

  (* Bra *)
  0B : unary ;
  BRA : unary ;
  ADJB : unary ;
  SCRB : infix binary ;
  ADDB : AC ;
  MLTB : infix binary ;
  TSRB : infix binary ;

  (* Operator *)
  0O : binary ;
  1O : unary ;
  OUTER : infix binary ;
  ADJO : unary ;
  SCRO : infix binary ;
  ADDO : AC ;
  MLTO : infix binary ;
  TSRO : infix binary ;

";

let X = vars "a b c x S0 S1 S2 S3 s s1 s2 t t1 t2 X Y B0 B1 B2 K0 K1 K2 O0 O1 O2 O1' O2' T1 T2 T3 T4 x0 x1 x2 x3 x4";

let R = TRS F X "

  (* ############# REDUCTION RULES FOR INTERNAL LANGUAGE ############### *)

  (********************************************)
  (*           complex number (avatar)        *)
  (********************************************)

  0 + a -> a ;
  0 * a -> 0 ;
  1 * a -> a ;
  a * (b + c) -> (a * b) + (a * c) ;
  0 ^* -> 0 ;
  1 ^* -> 1 ;
  (a + b) ^* -> (a ^*) + (b ^*) ;
  (a * b) ^* -> (a ^*) * (b ^*) ;
  (a ^*) ^* -> a ;

  (********************************************)
  (*                 Scalars                  *)
  (********************************************)

  (* DELTA *)

  DELTA(s, s) -> 1 ;
  DELTA(PAIR(s1, s2), PAIR(t1, t2)) -> DELTA(s1, t1) * DELTA(s2, t2) ;

  (* Extra Conjugate *)

  DELTA(s, t)^* -> DELTA(s, t) ;
  (B0 DOT K0)^* -> ADJB(K0) DOT ADJK(B0) ;

  (* DOT *)

  0B(TYPE) DOT K0 -> 0 ;
  B0 DOT 0K(TYPE) -> 0 ;
  (S0 SCRB B0) DOT K0 -> S0 * (B0 DOT K0) ;
  B0 DOT (S0 SCRK K0) -> S0 * (B0 DOT K0) ;
  (B1 ADDB B2) DOT K0 -> (B1 DOT K0) + (B2 DOT K0) ;
  B0 DOT (K1 ADDK K2) -> (B0 DOT K1) + (B0 DOT K2) ;
  BRA(s) DOT KET(t) -> DELTA(s, t) ;
  (B1 TSRB B2) DOT KET(PAIR(s, t)) -> (B1 DOT KET(s)) * (B2 DOT KET(t)) ;
  BRA(PAIR(s, t)) DOT (K1 TSRK K2) -> (BRA(s) DOT K1) * (BRA(t) DOT K2) ;
  (B1 TSRB B2) DOT (K1 TSRK K2) -> (B1 DOT K1) * (B2 DOT K2) ;

  (B0 MLTB O0) DOT K0 -> B0 DOT (O0 MLTK K0) ;
  BRA(PAIR(s, t)) DOT ((O1 TSRO O2) MLTK K0) -> ((BRA(s) MLTB O1) TSRB (BRA(t) MLTB O2)) DOT K0 ;
  (B1 TSRB B2) DOT ((O1 TSRO O2) MLTK K0) -> ((B1 MLTB O1) TSRB (B2 MLTB O2)) DOT K0 ;


  (********************************************)
  (*            Ket and Bra                   *)
  (********************************************)


  (* >>>> Conjugate Transpose <<<< *)
  ADJK(0B(TYPE)) -> 0K(TYPE) ;
  ADJK(BRA(t)) -> KET(t) ;
  ADJK(ADJB(K0)) -> K0 ;
  ADJK(S0 SCRB B0) -> S0^* SCRK ADJK(B0) ;
  ADJK(B1 ADDB B2) -> ADJK(B1) ADDK ADJK(B2) ;
  ADJK(B0 MLTB O0) -> ADJO(O0) MLTK ADJK(B0) ;
  ADJK(B1 TSRB B2) -> ADJK(B1) TSRK ADJK(B2) ;

  ADJB(0K(TYPE)) -> 0B(TYPE) ;
  ADJB(KET(t)) -> BRA(t) ;
  ADJB(ADJK(B0)) -> B0 ;
  ADJB(S0 SCRK K0) -> S0^* SCRB ADJB(K0) ;
  ADJB(K1 ADDK K2) -> ADJB(K1) ADDB ADJB(K2) ;
  ADJB(O0 MLTK K0) -> ADJB(K0) MLTB ADJO(O0) ;
  ADJB(K1 TSRK K2) -> ADJB(K1) TSRB ADJB(K2) ;

  (* >>>> Scalar Multiplication <<<< *)
  0 SCRK K0 -> 0K(TYPE) ;
  1 SCRK K0 -> K0 ;
  S0 SCRK 0K(TYPE) -> 0K(TYPE) ;
  S1 SCRK (S2 SCRK K0) -> (S1 * S2) SCRK K0 ;
  S0 SCRK (K1 ADDK K2) -> (S0 SCRK K1) ADDK (S0 SCRK K2) ;

  0 SCRB B0 -> 0B(TYPE) ;
  1 SCRB B0 -> B0 ;
  S0 SCRB 0B(TYPE) -> 0B(TYPE) ;
  S1 SCRB (S2 SCRB B0) -> (S1 * S2) SCRB B0 ;
  S0 SCRB (B1 ADDB B2) -> (S0 SCRB B1) ADDB (S0 SCRB B2) ;

  (* >>>> Addition <<<< *)
  K0 ADDK 0K(TYPE) -> K0 ;
  K0 ADDK K0 -> (1 + 1) SCRK K0 ;
  (S0 SCRK K0) ADDK K0 -> (S0 + 1) SCRK K0 ;
  (S1 SCRK K0) ADDK (S2 SCRK K0) -> (S1 + S2) SCRK K0 ;

  B0 ADDB 0B(TYPE) -> B0 ;
  B0 ADDB B0 -> (1 + 1) SCRB B0 ;
  (S0 SCRB B0) ADDB B0 -> (S0 + 1) SCRB B0 ;
  (S1 SCRB B0) ADDB (S2 SCRB B0) -> (S1 + S2) SCRB B0 ;


  (* >>>> Multiplication <<<< *)
  0O(TYPE, TYPE) MLTK K0 -> 0K(TYPE) ;
  O0 MLTK 0K(TYPE) -> 0K(TYPE) ;
  1O(TYPE) MLTK K0 -> K0 ;
  (S0 SCRO O0) MLTK K0 -> S0 SCRK (O0 MLTK K0) ;
  O0 MLTK (S0 SCRK K0) -> S0 SCRK (O0 MLTK K0) ;
  (O1 ADDO O2) MLTK K0 -> (O1 MLTK K0) ADDK (O2 MLTK K0) ;
  O0 MLTK (K1 ADDK K2) -> (O0 MLTK K1) ADDK (O0 MLTK K2) ;
  (K1 OUTER B0) MLTK K2 -> (B0 DOT K2) SCRK K1 ;
  (O1 MLTO O2) MLTK K0 -> O1 MLTK (O2 MLTK K0) ;
  (O1 TSRO O2) MLTK ((O1' TSRO O2') MLTK K0) -> ((O1 MLTO O1') TSRO (O2 MLTO O2')) MLTK K0 ;
  (O1 TSRO O2) MLTK KET(PAIR(s, t)) -> (O1 MLTK KET(s)) TSRK (O2 MLTK KET(t)) ;
  (O1 TSRO O2) MLTK (K1 TSRK K2) -> (O1 MLTK K1) TSRK (O2 MLTK K2) ;

  B0 MLTB 0O(TYPE, TYPE) -> 0B(TYPE) ;
  0B(TYPE) MLTB O0 -> 0B(TYPE) ;
  B0 MLTB 1O(TYPE) -> B0 ;
  B0 MLTB (S0 SCRO O0) -> S0 SCRB (B0 MLTB O0) ;
  (S0 SCRB B0) MLTB O0 -> S0 SCRB (B0 MLTB O0) ;
  B0 MLTB (O1 ADDO O2) -> (B0 MLTB O1) ADDB (B0 MLTB O2) ;
  (B1 ADDB B2) MLTB O0 -> (B1 MLTB O0) ADDB (B2 MLTB O0) ;
  B1 MLTB (K0 OUTER B2) -> (B1 DOT K0) SCRB B2 ;
  B0 MLTB (O1 MLTO O2) -> (B0 MLTB O1) MLTB O2 ;
  (B0 MLTB (O1' TSRO O2')) MLTB (O1 TSRO O2) -> B0 MLTB ((O1' MLTO O1) TSRO (O2' MLTO O2)) ;
  BRA(PAIR(s, t)) MLTB (O1 TSRO O2) -> (BRA(s) MLTB O1) TSRB (BRA(t) MLTB O2) ;
  (B1 TSRB B2) MLTB (O1 TSRO O2) -> (B1 MLTB O1) TSRB (B2 MLTB O2) ;

  (* >>>> Tensor Product <<<< *)
  0K(TYPE) TSRK K0 -> 0K(TYPE) ;
  K0 TSRK 0K(TYPE) -> 0K(TYPE) ;
  KET(s) TSRK KET(t) -> KET(PAIR(s, t)) ;
  (S0 SCRK K1) TSRK K2 -> S0 SCRK (K1 TSRK K2) ;
  K1 TSRK (S0 SCRK K2) -> S0 SCRK (K1 TSRK K2) ;
  (K1 ADDK K2) TSRK K0 -> (K1 TSRK K0) ADDK (K2 TSRK K0) ;
  K0 TSRK (K1 ADDK K2) -> (K0 TSRK K1) ADDK (K0 TSRK K2) ;

  0B(TYPE) TSRB B0 -> 0B(TYPE) ;
  B0 TSRB 0B(TYPE) -> 0B(TYPE) ;
  BRA(s) TSRB BRA(t) -> BRA(PAIR(s, t)) ;
  (S0 SCRB B1) TSRB B2 -> S0 SCRB (B1 TSRB B2) ;
  B1 TSRB (S0 SCRB B2) -> S0 SCRB (B1 TSRB B2) ;
  (B1 ADDB B2) TSRB B0 -> (B1 TSRB B0) ADDB (B2 TSRB B0) ;
  B0 TSRB (B1 ADDB B2) -> (B0 TSRB B1) ADDB (B0 TSRB B2) ;

  (********************************************)
  (*             Operators                    *)
  (********************************************)

  (* >>>> Outer Product <<<< *)
  0K(TYPE) OUTER B0 -> 0O(TYPE, TYPE) ;
  K0 OUTER 0B(TYPE) -> 0O(TYPE, TYPE) ;
  (S0 SCRK K0) OUTER B0 -> S0 SCRO (K0 OUTER B0) ;
  K0 OUTER (S0 SCRB B0) -> S0 SCRO (K0 OUTER B0) ;
  (K1 ADDK K2) OUTER B0 -> (K1 OUTER B0) ADDO (K2 OUTER B0) ;
  K0 OUTER (B1 ADDB B2) -> (K0 OUTER B1) ADDO (K0 OUTER B2) ;

  (* >>>> Conjugate Transpose <<<< *)
  ADJO(0O(TYPE, TYPE)) -> 0O(TYPE, TYPE) ;
  ADJO(1O(TYPE)) -> 1O(TYPE) ;
  ADJO(K0 OUTER B0) -> ADJK(B0) OUTER ADJB(K0) ;
  ADJO(ADJO(O0)) -> O0 ;
  ADJO(S0 SCRO O0) -> S0^* SCRO ADJO(O0) ;
  ADJO(O1 ADDO O2) -> ADJO(O1) ADDO ADJO(O2) ;
  ADJO(O1 MLTO O2) -> ADJO(O2) MLTO ADJO(O1) ;
  ADJO(O1 TSRO O2) -> ADJO(O1) TSRO ADJO(O2) ;

  (* >>>> Scalar Multiplication <<<< *)
  0 SCRO O0 -> 0O(TYPE, TYPE) ;
  1 SCRO O0 -> O0 ;
  S0 SCRO 0O(TYPE, TYPE) -> 0O(TYPE, TYPE) ;
  S1 SCRO (S2 SCRO O0) -> (S1 * S2) SCRO O0 ;
  S0 SCRO (O1 ADDO O2) -> (S0 SCRO O1) ADDO (S0 SCRO O2) ;

  (* >>>> Addition <<<< *)
  O0 ADDO 0O(TYPE, TYPE) -> O0 ;
  O0 ADDO O0 -> (1 + 1) SCRO O0 ;
  (S0 SCRO O0) ADDO O0 -> (S0 + 1) SCRO O0 ;
  (S1 SCRO O0) ADDO (S2 SCRO O0) -> (S1 + S2) SCRO O0 ;


  (* >>>> Multiplication <<<< *)
  0O(TYPE, TYPE) MLTO O0 -> 0O(TYPE, TYPE) ;
  O0 MLTO 0O(TYPE, TYPE) -> 0O(TYPE, TYPE) ;
  1O(TYPE) MLTO O0 -> O0 ;
  O0 MLTO 1O(TYPE) -> O0 ;
  (K0 OUTER B0) MLTO O0 -> K0 OUTER (B0 MLTB O0) ;
  O0 MLTO (K0 OUTER B0) -> (O0 MLTK K0) OUTER B0 ;
  (S0 SCRO O1) MLTO O2 -> S0 SCRO (O1 MLTO O2) ;
  O1 MLTO (S0 SCRO O2) -> S0 SCRO (O1 MLTO O2) ;
  (O1 ADDO O2) MLTO O0 -> (O1 MLTO O0) ADDO (O2 MLTO O0) ;
  O0 MLTO (O1 ADDO O2) -> (O0 MLTO O1) ADDO (O0 MLTO O2) ;
  (O1 MLTO O2) MLTO O0 -> O1 MLTO (O2 MLTO O0) ;
  (O1 TSRO O2) MLTO (O1' TSRO O2') -> (O1 MLTO O1') TSRO (O2 MLTO O2') ;
  (O1 TSRO O2) MLTO ((O1' TSRO O2') MLTO O0) -> ((O1 MLTO O1') TSRO (O2 MLTO O2')) MLTO O0 ;

  (* >>>> Tensor Product <<<< *)
  0O(TYPE, TYPE) TSRO O0 -> 0O(TYPE, TYPE) ;
  O0 TSRO 0O(TYPE, TYPE) -> 0O(TYPE, TYPE) ;
  1O(TYPE) TSRO 1O(TYPE) -> 1O(TYPE) ;
  (K1 OUTER B1) TSRO (K2 OUTER B2) -> (K1 TSRK K2) OUTER (B1 TSRB B2) ;
  (S0 SCRO O1) TSRO O2 -> S0 SCRO (O1 TSRO O2) ;
  O1 TSRO (S0 SCRO O2) -> S0 SCRO (O1 TSRO O2) ;
  (O1 ADDO O2) TSRO O0 -> (O1 TSRO O0) ADDO (O2 TSRO O0) ;
  O0 TSRO (O1 ADDO O2) -> (O0 TSRO O1) ADDO (O0 TSRO O2) ;



  (* ######################## Fst - Snd Ext ####################### *)
  
  FST(PAIR(s, t)) -> s ;
  SND(PAIR(s, t)) -> t ;
  PAIR(FST(s), SND(s)) -> s ;

  DELTA(s, PAIR(t1, t2)) -> DELTA(FST(s), t1) * DELTA(SND(s), t2) ;
  DELTA(FST(s), FST(t)) * DELTA(SND(s), SND(t)) -> DELTA(s, t) ;

  (B1 TSRB B2) DOT KET(t) -> (B1 DOT KET(FST(t))) * (B2 DOT KET(SND(t))) ;
  BRA(t) DOT (K1 TSRK K2) -> (BRA(FST(t)) DOT K1) * (BRA(SND(t)) DOT K2) ;
  BRA(s) DOT ((O1 TSRO O2) MLTK K0) -> ((BRA(FST(s)) MLTB O1) TSRB (BRA(SND(s)) MLTB O2)) DOT K0 ;
  (O1 TSRO O2) MLTK KET(t) -> (O1 MLTK KET(FST(t))) TSRK (O2 MLTK KET(SND(t))) ;
  BRA(t) MLTB (O1 TSRO O2) -> (BRA(FST(t)) MLTB O1) TSRB (BRA(SND(t)) MLTB O2) ;

";

(* confluence R; *)

let u = term F X "

type(x0)

";

let v = term F X "

type(x0)

";

normalize R u;

normalize R v;

(*

print_all_cps R;

#quit;

*)

print_all_cps R;

#quit;
